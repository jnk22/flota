[tool.poetry]
name = "flota"
version = "0.0.10"
description = "Extended version of FLOTA tokenizer."
authors = ["Valentin Hofmann"]
maintainers = [
  "Jannik Schaefer <jannik-schaefer@inbox-online.de>",
  "Cedric Gaberle <cedric.gaberle@web.de>",
]
license = "MIT"
readme = "README.md"
classifiers = [
  'Development Status :: 2 - Pre-Alpha',
  'Intended Audience :: Developers',
  'Natural Language :: English',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
]
packages = [{ include = "flota" }]

[tool.poetry.dependencies]
python = ">=3.10,<3.12"

# Base functionality
torch = "^1.13.0"
transformers = "^4.33.0"

# CLI and API
fastapi = { version = "^0.103.0", optional = true }
numpy = { version = "^1.26.0", optional = true }
polars = { version = "^0.19.0", optional = true }
polars-lts-cpu = { version = "^0.19.0", optional = true }
scikit-learn = { version = "^1.3.0", optional = true }
tqdm = { version = "^4.66.0", optional = true }
typer = { version = "^0.9.0", optional = true }
uvicorn = { version = "^0.23.0", optional = true }

# Testing
pytest = { version = "^7.4.0", optional = true }
pytest-cov = { version = "^4.1.0", optional = true }
pytest-xdist = { version = "^3.3.0", optional = true }

# Development
black = { version = "^23.12.0", optional = true }
mypy = { version = "^1.8.0", optional = true }
pre-commit = { version = "^3.4.0", optional = true }
pyright = { version = "^1.1.0", optional = true }
ruff = { version = "^0.1.0", optional = true }
sourcery = { version = "^1.10.0", optional = true }
vulture = { version = "^2.10.0", optional = true }

[tool.poetry.extras]
api = ["fastapi", "typer", "uvicorn"]
cli = ["numpy", "polars", "scikit-learn", "tqdm", "typer"]
cli-lts = ["numpy", "polars-lts-cpu", "scikit-learn", "tqdm", "typer"]

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
typer = "*"
fastapi = "*"
scikit-learn = "*"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
typer = "*"
fastapi = "*"
scikit-learn = "*"
uvicorn = "*"
tqdm = "*"
polars = "*"
numpy = "*"
black = "*"
mypy = "*"
pre-commit = "*"
ruff = "*"
source = "*"
vulture = "*"

[tool.poetry.scripts]
flota = "flota.main:cli"

[build-system]
requires = ["poetry-core>=1.3.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = "-n auto --doctest-modules"

[tool.coverage.report]
exclude_lines = ["if (typing\\.)?TYPE_CHECKING:"]

[tool.mypy]
ignore_missing_imports = true

[tool.pyright]
include = ["flota"]
exclude = ["**/__pycache__"]
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.10"
pythonPlatform = "Linux"

[tool.black]
target-version = ['py310']

[tool.vulture]
make_whitelist = true
min_confidence = 100
paths = ["flota"]
sort_by_size = true

[tool.ruff]
line-length = 88
select = ["ALL"]
target-version = "py310"
ignore = [
  "ANN101", # flake8-annotations: missing-type-self
  "ANN102", # flake8-annotations: missing-type-cls
  "COM812", # flake8-commas: trailing-comma-on-bare-tuple-prohibited
]
unfixable = [
  "T201", # flake8-print: print-found
  "ERA001", # eradicate: commented-out-code
  "F401", # Pyflakes: unused-import
  "F841", # Pyflakes: unused-variable
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"__init__.py" = ["D104", "F401"]
"__main__.py" = ["D100"]
"tests/*.py" = ["S101"]
"cli.py" = ["T201", "B008"]
"main.py" = ["UP007"]
"server.py" = ["B008"]
